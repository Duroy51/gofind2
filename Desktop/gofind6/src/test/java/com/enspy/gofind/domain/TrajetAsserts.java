package com.enspy.gofind.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrajetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllPropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetAutoGeneratedPropertiesEquals(expected, actual);
        assertTrajetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAllUpdatablePropertiesEquals(Trajet expected, Trajet actual) {
        assertTrajetUpdatableFieldsEquals(expected, actual);
        assertTrajetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetAutoGeneratedPropertiesEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableFieldsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getHeuredepart()).as("check heuredepart").isEqualTo(actual.getHeuredepart()))
            .satisfies(e -> assertThat(e.getHeurearrivee()).as("check heurearrivee").isEqualTo(actual.getHeurearrivee()))
            .satisfies(e -> assertThat(e.getLieudepart()).as("check lieudepart").isEqualTo(actual.getLieudepart()))
            .satisfies(e -> assertThat(e.getLieuarrivee()).as("check lieuarrivee").isEqualTo(actual.getLieuarrivee()))
            .satisfies(e -> assertThat(e.getNombreplace()).as("check nombreplace").isEqualTo(actual.getNombreplace()))
            .satisfies(e -> assertThat(e.getPrixplace()).as("check prixplace").isEqualTo(actual.getPrixplace()))
            .satisfies(e -> assertThat(e.getImageVehicule()).as("check imageVehicule").isEqualTo(actual.getImageVehicule()))
            .satisfies(
                e ->
                    assertThat(e.getImageVehiculeContentType())
                        .as("check imageVehicule contenty type")
                        .isEqualTo(actual.getImageVehiculeContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajetUpdatableRelationshipsEquals(Trajet expected, Trajet actual) {
        assertThat(expected)
            .as("Verify Trajet relationships")
            .satisfies(e -> assertThat(e.getUtilisateur()).as("check utilisateur").isEqualTo(actual.getUtilisateur()));
    }
}
