package org.enspy.gofind.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnnonceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnonceAllPropertiesEquals(Annonce expected, Annonce actual) {
        assertAnnonceAutoGeneratedPropertiesEquals(expected, actual);
        assertAnnonceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnonceAllUpdatablePropertiesEquals(Annonce expected, Annonce actual) {
        assertAnnonceUpdatableFieldsEquals(expected, actual);
        assertAnnonceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnonceAutoGeneratedPropertiesEquals(Annonce expected, Annonce actual) {
        assertThat(expected)
            .as("Verify Annonce auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnonceUpdatableFieldsEquals(Annonce expected, Annonce actual) {
        assertThat(expected)
            .as("Verify Annonce relevant properties")
            .satisfies(e -> assertThat(e.getTitre()).as("check titre").isEqualTo(actual.getTitre()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatut()).as("check statut").isEqualTo(actual.getStatut()))
            .satisfies(e -> assertThat(e.getDatecreation()).as("check datecreation").isEqualTo(actual.getDatecreation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnonceUpdatableRelationshipsEquals(Annonce expected, Annonce actual) {
        assertThat(expected)
            .as("Verify Annonce relationships")
            .satisfies(e -> assertThat(e.getTrajet()).as("check trajet").isEqualTo(actual.getTrajet()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getDeclarationVol()).as("check declarationVol").isEqualTo(actual.getDeclarationVol()))
            .satisfies(e -> assertThat(e.getUtilisateur()).as("check utilisateur").isEqualTo(actual.getUtilisateur()));
    }
}
